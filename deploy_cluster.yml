---
- name: Deploy MariaDB Replication Cluster
  hosts: all
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      include_vars: "vars/main.yml"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3

    - name: Add entries into /etc/hosts file
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item].ansible_host }} {{item}}"
        state: present
        unsafe_writes: true  # to prevent failures in CI
      with_items: "{{ groups.all }}"

    - name: Update and install some packages
      apt:
        name:
          - apt-transport-https
          - python3-pip
          - python3-dev
          - default-libmysqlclient-dev
          - build-essential
        update_cache: true
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3

    - name: Make sure pymysql is present
      pip:
        name:
          - pymysql
        state: present
      register: pip_status
      until: pip_status is success
      delay: 5
      retries: 3
      

- name: deploy_cluster.yml | Install MariaDB
  hosts: mariadb_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      include_vars: "vars/main.yml"

  tasks:
    - name: Import the MariaDB PGP Key
      apt_key:
        url: "{{mariadb_pgp_key_url}}"
        state: present
      register: apt_key_status
      until: apt_key_status is success
      delay: 5
      retries: 3

    - name: Add MariaDB repository
      apt_repository:
        repo: "{{mariadb_repo_url}}"
        state: present
        filename: mariadb
        update_cache: yes
      register: apt_repo_status
      until: apt_repo_status is success
      delay: 5
      retries: 3

    - name: Install mariadb-server and mariadb-client
      apt:
        name:
          - mariadb-server
          - mariadb-client
        update_cache: yes
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3


- name: deploy_cluster.yml | Prepare master node
  hosts: master
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      include_vars: "vars/main.yml"

  tasks:
    - name: Check if mysql_secure_install was already executed
      stat: 
        path: "/tmp/mariadb_secured"
      register: mariadb_secured

    - name: Set root password
      mysql_user:
        name: root
        password: "{{ mariadb_root_password }}"
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock
      no_log: yes
      when:
        - set_mariadb_root_password
        - not mariadb_secured.stat.exists
    
    - name: Removes all anonymous user accounts
      mysql_user:
        name: ''
        host_all: true
        state: absent
        login_user: root
        login_password: "{{ mariadb_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      no_log: yes
      when: not mariadb_secured.stat.exists
      
    - name: Remove test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mariadb_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      no_log: yes
      when: not mariadb_secured.stat.exists

    - name: create mariadb_secured
      file: 
        path: "/tmp/mariadb_secured"
        state: touch
      when: not mariadb_secured.stat.exists
    
    - name: Replace bind address to 0.0.0.0
      replace:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '127.0.0.1'
        replace: 0.0.0.0
    
    - name: Enable binary log
      blockinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        block: |
          server-id = 1
          log_bin = /var/log/mysql/mysql-bin.log
          max_binlog_size = 100M
          relay_log = /var/log/mysql/mysql-relay-bin
          relay_log_index = /var/log/mysql/mysql-relay-bin.index
    
    - name: Restart service mariadb
      service:
        name: mariadb
        state: restarted

    - name: Create replication user
      mysql_user:
        name: "{{ mariadb_replication_user }}"
        host: "{{ mariadb_replication_host | default('%') }}"
        password: "{{ mariadb_replication_password }}"
        priv: "*.*:REPLICATION SLAVE"
        state: present
        login_user: root
        login_password: "{{ mariadb_root_password }}"
        login_unix_socket: /run/mysqld/mysqld.sock

    - name: Create reguler user
      mysql_user:
        name: "{{ mariadb_user }}"
        host: "{{ mariadb_host | default('%') }}"
        password: "{{ mariadb_password }}"
        priv: "*.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mariadb_root_password }}"
        login_unix_socket: /run/mysqld/mysqld.sock
      when: create_user

- name: deploy_cluster.yml | prepare replica node
  hosts: slave
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      include_vars: "vars/main.yml"

  tasks:
    - name: Replace bind address to 0.0.0.0
      replace:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '127.0.0.1'
        replace: 0.0.0.0
    
    - name: Enable binary log
      blockinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        block: |
          server-id = {{ groups['slave'].index(inventory_hostname) | int + 2 }}
          log_bin = /var/log/mysql/mysql-bin.log
          max_binlog_size = 100M
          relay_log = /var/log/mysql/mysql-relay-bin
          relay_log_index = /var/log/mysql/mysql-relay-bin.index

    - name: Restart service mariadb
      service:
        name: mariadb
        state: restarted


- name: deploy_cluster.yml | Create replication
  hosts: mariadb_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Include main variables
      include_vars: "vars/main.yml"

  tasks:
    - name: Stop slave
      command: mariadb -e 'STOP SLAVE;'
      when: not is_master

    - name: Get replication master status
      mysql_replication:
        mode: getmaster
        login_user: root
        login_password: "{{ mariadb_root_password }}"
        login_unix_socket: /run/mysqld/mysqld.sock
      register: __mariadb_repl_master_status
      when: is_master

    - name: "Add master status to dummy host"
      add_host:
        name:   "MASTER_STAT_HOLDER"
        file:  "{{ __mariadb_repl_master_status.File }}"
        position: "{{ __mariadb_repl_master_status.Position }}"

    - name: Configure replication settings
      mysql_replication:
        mode: changemaster
        master_host: "{{ groups['master'][0] }}"
        master_log_file: "{{ hostvars.MASTER_STAT_HOLDER.file }}"
        master_log_pos: "{{ hostvars.MASTER_STAT_HOLDER.position }}"
        master_user: "{{ mariadb_replication_user }}"
        master_password: "{{ mariadb_replication_password }}"
        login_unix_socket: /run/mysqld/mysqld.sock
      when: not is_master
      
    - name: Start slave
      command: mariadb -e 'START SLAVE;'
      when: not is_master